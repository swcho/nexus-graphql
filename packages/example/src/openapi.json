{
  "openapi": "3.0.0",
  "info": {
    "description": "LoopBack model relations example",
    "title": "loopback-example-relations",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "paths": {
    "/Books": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.find",
        "summary": "Find all instances of the model matched by filter from the data source."
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.patchOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/Book"
        },
        "summary": "Patch an existing model instance or insert a new one into the data source."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Book"
        },
        "summary": "Create a new instance of the model and persist it into the data source."
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.replaceOrCreate__put_Books",
        "requestBody": {
          "$ref": "#/components/requestBodies/Book"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Books/change-stream": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "options",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.createChangeStream__get_Books_change-stream",
        "summary": "Create a change stream."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.createChangeStream__post_Books_change-stream",
        "requestBody": {
          "$ref": "#/components/requestBodies/User.createChangeStream__post_Users_change-stream"
        },
        "summary": "Create a change stream."
      }
    },
    "/Books/count": {
      "get": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.count",
        "summary": "Count instances of the model matched by where from the data source."
      }
    },
    "/Books/findOne": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.findOne",
        "summary": "Find first instance of the model matched by filter from the data source."
      }
    },
    "/Books/replaceOrCreate": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.replaceOrCreate__post_Books_replaceOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/Book"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Books/update": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.updateAll",
        "requestBody": {
          "$ref": "#/components/requestBodies/Book2"
        },
        "summary": "Update instances of the model matched by {{where}} from the data source."
      }
    },
    "/Books/upsertWithWhere": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.upsertWithWhere",
        "requestBody": {
          "$ref": "#/components/requestBodies/Book2"
        },
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria."
      }
    },
    "/Books/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.deleteById",
        "summary": "Delete a model instance by {{id}} from the data source."
      },
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.findById",
        "summary": "Find a model instance by {{id}} from the data source."
      },
      "head": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.exists__head_Books_{id}",
        "summary": "Check whether a model instance exists in the data source."
      },
      "patch": {
        "parameters": [
          {
            "description": "Book id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.prototype.patchAttributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "An object of model property name/value pairs"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "An object of model property name/value pairs"
              }
            }
          },
          "description": "An object of model property name/value pairs"
        },
        "summary": "Patch attributes for a model instance and persist it into the data source."
      },
      "put": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.replaceById__put_Books_{id}",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Books/{id}/exists": {
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.exists__get_Books_{id}_exists",
        "summary": "Check whether a model instance exists in the data source."
      }
    },
    "/Books/{id}/people": {
      "delete": {
        "parameters": [
          {
            "description": "Book id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.prototype.__delete__people",
        "summary": "이 모델의 모든 people을(를) 삭제합니다."
      },
      "get": {
        "parameters": [
          {
            "description": "Book id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.prototype.__get__people",
        "summary": "Book의 people을(를) 조회합니다."
      },
      "post": {
        "parameters": [
          {
            "description": "Book id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.prototype.__create__people",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            }
          }
        },
        "summary": "이 모델의 people에서 새 인스턴스를 작성합니다."
      }
    },
    "/Books/{id}/people/count": {
      "get": {
        "parameters": [
          {
            "description": "Book id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.prototype.__count__people",
        "summary": "Book의 people을(를) 계수합니다."
      }
    },
    "/Books/{id}/people/{fk}": {
      "delete": {
        "parameters": [
          {
            "description": "Book id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "people의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.prototype.__destroyById__people",
        "summary": "people에 대해 ID로 관련 항목을 삭제하십시오."
      },
      "get": {
        "parameters": [
          {
            "description": "Book id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "people의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.prototype.__findById__people",
        "summary": "people에 대해 ID로 관련 항목을 찾으십시오."
      },
      "put": {
        "parameters": [
          {
            "description": "Book id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "people의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.prototype.__updateById__people",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            }
          }
        },
        "summary": "people에 대해 ID로 관련 항목을 업데이트하십시오."
      }
    },
    "/Books/{id}/replace": {
      "post": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Book"
        ],
        "deprecated": false,
        "operationId": "Book.replaceById__post_Books_{id}_replace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Book",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Customers": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.find",
        "summary": "Find all instances of the model matched by filter from the data source."
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.patchOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/Customer"
        },
        "summary": "Patch an existing model instance or insert a new one into the data source."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Customer"
        },
        "summary": "Create a new instance of the model and persist it into the data source."
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.replaceOrCreate__put_Customers",
        "requestBody": {
          "$ref": "#/components/requestBodies/Customer"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Customers/change-stream": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "options",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.createChangeStream__get_Customers_change-stream",
        "summary": "Create a change stream."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.createChangeStream__post_Customers_change-stream",
        "requestBody": {
          "$ref": "#/components/requestBodies/User.createChangeStream__post_Users_change-stream"
        },
        "summary": "Create a change stream."
      }
    },
    "/Customers/count": {
      "get": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.count",
        "summary": "Count instances of the model matched by where from the data source."
      }
    },
    "/Customers/findOne": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.findOne",
        "summary": "Find first instance of the model matched by filter from the data source."
      }
    },
    "/Customers/replaceOrCreate": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.replaceOrCreate__post_Customers_replaceOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/Customer"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Customers/update": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.updateAll",
        "requestBody": {
          "$ref": "#/components/requestBodies/Customer2"
        },
        "summary": "Update instances of the model matched by {{where}} from the data source."
      }
    },
    "/Customers/upsertWithWhere": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.upsertWithWhere",
        "requestBody": {
          "$ref": "#/components/requestBodies/Customer2"
        },
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria."
      }
    },
    "/Customers/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.deleteById",
        "summary": "Delete a model instance by {{id}} from the data source."
      },
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.findById",
        "summary": "Find a model instance by {{id}} from the data source."
      },
      "head": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.exists__head_Customers_{id}",
        "summary": "Check whether a model instance exists in the data source."
      },
      "patch": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.patchAttributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "An object of model property name/value pairs"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "An object of model property name/value pairs"
              }
            }
          },
          "description": "An object of model property name/value pairs"
        },
        "summary": "Patch attributes for a model instance and persist it into the data source."
      },
      "put": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.replaceById__put_Customers_{id}",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Customers/{id}/accounts": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__delete__accounts",
        "summary": "이 모델의 모든 accounts을(를) 삭제합니다."
      },
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__get__accounts",
        "summary": "Customer의 accounts을(를) 조회합니다."
      },
      "post": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__create__accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "summary": "이 모델의 accounts에서 새 인스턴스를 작성합니다."
      }
    },
    "/Customers/{id}/accounts/count": {
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__count__accounts",
        "summary": "Customer의 accounts을(를) 계수합니다."
      }
    },
    "/Customers/{id}/accounts/rel/{fk}": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "accounts의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__unlink__accounts",
        "summary": "ID로 항목에 대한 accounts 관계를 제거하십시오."
      },
      "head": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "accounts의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/javascript": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__exists__accounts",
        "summary": "ID로 항목에 대한 accounts 관계의 존재를 확인하십시오."
      },
      "put": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "accounts의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__link__accounts",
        "summary": "accounts에 대해 ID로 관련 항목을 추가하십시오."
      }
    },
    "/Customers/{id}/accounts/{fk}": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "accounts의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__destroyById__accounts",
        "summary": "accounts에 대해 ID로 관련 항목을 삭제하십시오."
      },
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "accounts의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__findById__accounts",
        "summary": "accounts에 대해 ID로 관련 항목을 찾으십시오."
      },
      "put": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "accounts의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__updateById__accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "summary": "accounts에 대해 ID로 관련 항목을 업데이트하십시오."
      }
    },
    "/Customers/{id}/address": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__destroy__address",
        "summary": "이 모델의 address을(를) 삭제합니다."
      },
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "refresh",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__get__address",
        "summary": "페치에 하나의 관계 address이(가) 있습니다."
      },
      "post": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__create__address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        },
        "summary": "이 모델의 address에서 새 인스턴스를 작성합니다."
      },
      "put": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__update__address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        },
        "summary": "이 모델의 address을(를) 업데이트하십시오."
      }
    },
    "/Customers/{id}/emails": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__delete__emails",
        "summary": "이 모델의 모든 emails을(를) 삭제합니다."
      },
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EmailAddress"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EmailAddress"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EmailAddress"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EmailAddress"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EmailAddress"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__get__emails",
        "summary": "Customer의 emails을(를) 조회합니다."
      },
      "post": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__create__emails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailAddress"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EmailAddress"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmailAddress"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmailAddress"
              }
            }
          }
        },
        "summary": "이 모델의 emails에서 새 인스턴스를 작성합니다."
      }
    },
    "/Customers/{id}/emails/count": {
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__count__emails",
        "summary": "Customer의 emails을(를) 계수합니다."
      }
    },
    "/Customers/{id}/emails/{fk}": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "emails의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__destroyById__emails",
        "summary": "emails에 대해 ID로 관련 항목을 삭제하십시오."
      },
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "emails의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__findById__emails",
        "summary": "emails에 대해 ID로 관련 항목을 찾으십시오."
      },
      "put": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "emails의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddress"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__updateById__emails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailAddress"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EmailAddress"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmailAddress"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmailAddress"
              }
            }
          }
        },
        "summary": "emails에 대해 ID로 관련 항목을 업데이트하십시오."
      }
    },
    "/Customers/{id}/exists": {
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.exists__get_Customers_{id}_exists",
        "summary": "Check whether a model instance exists in the data source."
      }
    },
    "/Customers/{id}/orders": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__delete__orders",
        "summary": "이 모델의 모든 orders을(를) 삭제합니다."
      },
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__get__orders",
        "summary": "Customer의 orders을(를) 조회합니다."
      },
      "post": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__create__orders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "summary": "이 모델의 orders에서 새 인스턴스를 작성합니다."
      }
    },
    "/Customers/{id}/orders/count": {
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__count__orders",
        "summary": "Customer의 orders을(를) 계수합니다."
      }
    },
    "/Customers/{id}/orders/{fk}": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__destroyById__orders",
        "summary": "orders에 대해 ID로 관련 항목을 삭제하십시오."
      },
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__findById__orders",
        "summary": "orders에 대해 ID로 관련 항목을 찾으십시오."
      },
      "put": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__updateById__orders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "summary": "orders에 대해 ID로 관련 항목을 업데이트하십시오."
      }
    },
    "/Customers/{id}/orders/{nk}/customer": {
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키입니다.",
            "in": "path",
            "name": "nk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "refresh",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__get__orders__customer",
        "summary": "페치가 관계 customer에 속합니다."
      }
    },
    "/Customers/{id}/orders/{nk}/shipments": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키입니다.",
            "in": "path",
            "name": "nk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__delete__orders__shipments",
        "summary": "이 모델의 모든 shipments을(를) 삭제합니다."
      },
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키입니다.",
            "in": "path",
            "name": "nk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__get__orders__shipments",
        "summary": "Order의 shipments을(를) 조회합니다."
      },
      "post": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키입니다.",
            "in": "path",
            "name": "nk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__create__orders__shipments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            }
          }
        },
        "summary": "이 모델의 shipments에서 새 인스턴스를 작성합니다."
      }
    },
    "/Customers/{id}/orders/{nk}/shipments/count": {
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키입니다.",
            "in": "path",
            "name": "nk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__count__orders__shipments",
        "summary": "Order의 shipments을(를) 계수합니다."
      }
    },
    "/Customers/{id}/orders/{nk}/shipments/{fk}": {
      "delete": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키입니다.",
            "in": "path",
            "name": "nk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "shipments의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__destroyById__orders__shipments",
        "summary": "shipments에 대해 ID로 관련 항목을 삭제하십시오."
      },
      "get": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키입니다.",
            "in": "path",
            "name": "nk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "shipments의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__findById__orders__shipments",
        "summary": "shipments에 대해 ID로 관련 항목을 찾으십시오."
      },
      "put": {
        "parameters": [
          {
            "description": "Customer id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "orders의 외부 키입니다.",
            "in": "path",
            "name": "nk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "shipments의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.prototype.__updateById__orders__shipments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            }
          }
        },
        "summary": "shipments에 대해 ID로 관련 항목을 업데이트하십시오."
      }
    },
    "/Customers/{id}/replace": {
      "post": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Customer"
        ],
        "deprecated": false,
        "operationId": "Customer.replaceById__post_Customers_{id}_replace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Customer",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Orders": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.find",
        "summary": "Find all instances of the model matched by filter from the data source."
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.patchOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/Order2"
        },
        "summary": "Patch an existing model instance or insert a new one into the data source."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Order2"
        },
        "summary": "Create a new instance of the model and persist it into the data source."
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.replaceOrCreate__put_Orders",
        "requestBody": {
          "$ref": "#/components/requestBodies/Order2"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Orders/change-stream": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "options",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.createChangeStream__get_Orders_change-stream",
        "summary": "Create a change stream."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.createChangeStream__post_Orders_change-stream",
        "requestBody": {
          "$ref": "#/components/requestBodies/User.createChangeStream__post_Users_change-stream"
        },
        "summary": "Create a change stream."
      }
    },
    "/Orders/count": {
      "get": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.count",
        "summary": "Count instances of the model matched by where from the data source."
      }
    },
    "/Orders/findOne": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.findOne",
        "summary": "Find first instance of the model matched by filter from the data source."
      }
    },
    "/Orders/replaceOrCreate": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.replaceOrCreate__post_Orders_replaceOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/Order2"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Orders/update": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.updateAll",
        "requestBody": {
          "$ref": "#/components/requestBodies/Order3"
        },
        "summary": "Update instances of the model matched by {{where}} from the data source."
      }
    },
    "/Orders/upsertWithWhere": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.upsertWithWhere",
        "requestBody": {
          "$ref": "#/components/requestBodies/Order3"
        },
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria."
      }
    },
    "/Orders/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.deleteById",
        "summary": "Delete a model instance by {{id}} from the data source."
      },
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.findById",
        "summary": "Find a model instance by {{id}} from the data source."
      },
      "head": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.exists__head_Orders_{id}",
        "summary": "Check whether a model instance exists in the data source."
      },
      "patch": {
        "parameters": [
          {
            "description": "Order id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.prototype.patchAttributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "An object of model property name/value pairs"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "An object of model property name/value pairs"
              }
            }
          },
          "description": "An object of model property name/value pairs"
        },
        "summary": "Patch attributes for a model instance and persist it into the data source."
      },
      "put": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.replaceById__put_Orders_{id}",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Orders/{id}/customer": {
      "get": {
        "parameters": [
          {
            "description": "Order id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "refresh",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.prototype.__get__customer",
        "summary": "페치가 관계 customer에 속합니다."
      }
    },
    "/Orders/{id}/exists": {
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.exists__get_Orders_{id}_exists",
        "summary": "Check whether a model instance exists in the data source."
      }
    },
    "/Orders/{id}/replace": {
      "post": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.replaceById__post_Orders_{id}_replace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Orders/{id}/shipments": {
      "delete": {
        "parameters": [
          {
            "description": "Order id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.prototype.__delete__shipments",
        "summary": "이 모델의 모든 shipments을(를) 삭제합니다."
      },
      "get": {
        "parameters": [
          {
            "description": "Order id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.prototype.__get__shipments",
        "summary": "Order의 shipments을(를) 조회합니다."
      },
      "post": {
        "parameters": [
          {
            "description": "Order id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.prototype.__create__shipments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            }
          }
        },
        "summary": "이 모델의 shipments에서 새 인스턴스를 작성합니다."
      }
    },
    "/Orders/{id}/shipments/count": {
      "get": {
        "parameters": [
          {
            "description": "Order id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.prototype.__count__shipments",
        "summary": "Order의 shipments을(를) 계수합니다."
      }
    },
    "/Orders/{id}/shipments/{fk}": {
      "delete": {
        "parameters": [
          {
            "description": "Order id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "shipments의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.prototype.__destroyById__shipments",
        "summary": "shipments에 대해 ID로 관련 항목을 삭제하십시오."
      },
      "get": {
        "parameters": [
          {
            "description": "Order id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "shipments의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.prototype.__findById__shipments",
        "summary": "shipments에 대해 ID로 관련 항목을 찾으십시오."
      },
      "put": {
        "parameters": [
          {
            "description": "Order id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "shipments의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Order"
        ],
        "deprecated": false,
        "operationId": "Order.prototype.__updateById__shipments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            }
          }
        },
        "summary": "shipments에 대해 ID로 관련 항목을 업데이트하십시오."
      }
    },
    "/Shipments": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.find",
        "summary": "Find all instances of the model matched by filter from the data source."
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.patchOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/Shipment2"
        },
        "summary": "Patch an existing model instance or insert a new one into the data source."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Shipment2"
        },
        "summary": "Create a new instance of the model and persist it into the data source."
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.replaceOrCreate__put_Shipments",
        "requestBody": {
          "$ref": "#/components/requestBodies/Shipment2"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Shipments/change-stream": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "options",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.createChangeStream__get_Shipments_change-stream",
        "summary": "Create a change stream."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.createChangeStream__post_Shipments_change-stream",
        "requestBody": {
          "$ref": "#/components/requestBodies/User.createChangeStream__post_Users_change-stream"
        },
        "summary": "Create a change stream."
      }
    },
    "/Shipments/count": {
      "get": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.count",
        "summary": "Count instances of the model matched by where from the data source."
      }
    },
    "/Shipments/findOne": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.findOne",
        "summary": "Find first instance of the model matched by filter from the data source."
      }
    },
    "/Shipments/replaceOrCreate": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.replaceOrCreate__post_Shipments_replaceOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/Shipment2"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Shipments/update": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.updateAll",
        "requestBody": {
          "$ref": "#/components/requestBodies/Shipment3"
        },
        "summary": "Update instances of the model matched by {{where}} from the data source."
      }
    },
    "/Shipments/upsertWithWhere": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.upsertWithWhere",
        "requestBody": {
          "$ref": "#/components/requestBodies/Shipment3"
        },
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria."
      }
    },
    "/Shipments/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.deleteById",
        "summary": "Delete a model instance by {{id}} from the data source."
      },
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.findById",
        "summary": "Find a model instance by {{id}} from the data source."
      },
      "head": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.exists__head_Shipments_{id}",
        "summary": "Check whether a model instance exists in the data source."
      },
      "patch": {
        "parameters": [
          {
            "description": "Shipment id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.prototype.patchAttributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "An object of model property name/value pairs"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "An object of model property name/value pairs"
              }
            }
          },
          "description": "An object of model property name/value pairs"
        },
        "summary": "Patch attributes for a model instance and persist it into the data source."
      },
      "put": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.replaceById__put_Shipments_{id}",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Shipments/{id}/exists": {
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.exists__get_Shipments_{id}_exists",
        "summary": "Check whether a model instance exists in the data source."
      }
    },
    "/Shipments/{id}/order": {
      "get": {
        "parameters": [
          {
            "description": "Shipment id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "refresh",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.prototype.__get__order",
        "summary": "페치가 관계 order에 속합니다."
      }
    },
    "/Shipments/{id}/replace": {
      "post": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "Shipment"
        ],
        "deprecated": false,
        "operationId": "Shipment.replaceById__post_Shipments_{id}_replace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Shipment",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Users": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.find",
        "summary": "Find all instances of the model matched by filter from the data source."
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.patchOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "summary": "Patch an existing model instance or insert a new one into the data source."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.create",
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "summary": "Create a new instance of the model and persist it into the data source."
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.replaceOrCreate__put_Users",
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Users/change-password": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.changePassword",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "newPassword": {
                    "type": "string"
                  },
                  "oldPassword": {
                    "type": "string"
                  }
                },
                "required": [
                  "oldPassword"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Change a user's password."
      }
    },
    "/Users/change-stream": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "options",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.createChangeStream__get_Users_change-stream",
        "summary": "Create a change stream."
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {},
              "application/json": {},
              "application/xml": {},
              "text/javascript": {},
              "text/xml": {}
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.createChangeStream__post_Users_change-stream",
        "requestBody": {
          "$ref": "#/components/requestBodies/User.createChangeStream__post_Users_change-stream"
        },
        "summary": "Create a change stream."
      }
    },
    "/Users/confirm": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "redirect",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.confirm",
        "summary": "Confirm a user registration with identity verification token."
      }
    },
    "/Users/count": {
      "get": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.count",
        "summary": "Count instances of the model matched by where from the data source."
      }
    },
    "/Users/findOne": {
      "get": {
        "parameters": [
          {
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.findOne",
        "summary": "Find first instance of the model matched by filter from the data source."
      }
    },
    "/Users/login": {
      "post": {
        "parameters": [
          {
            "description": "Related objects to include in the response. See the description of return value for more details.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "description": "응답 본문에 로그인 시 작성한 AccessToken 특성이 포함됩니다.\n`include` 매개변수 값에 따라 본문에 추가 특성이 포함될 수 있습니다. \n\n  - `user` - `U+007BUserU+007D` - 현재 로그인된 사용자의 데이터. (`include=user`)\n\n",
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "description": "응답 본문에 로그인 시 작성한 AccessToken 특성이 포함됩니다.\n`include` 매개변수 값에 따라 본문에 추가 특성이 포함될 수 있습니다. \n\n  - `user` - `U+007BUserU+007D` - 현재 로그인된 사용자의 데이터. (`include=user`)\n\n",
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "description": "응답 본문에 로그인 시 작성한 AccessToken 특성이 포함됩니다.\n`include` 매개변수 값에 따라 본문에 추가 특성이 포함될 수 있습니다. \n\n  - `user` - `U+007BUserU+007D` - 현재 로그인된 사용자의 데이터. (`include=user`)\n\n",
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "description": "응답 본문에 로그인 시 작성한 AccessToken 특성이 포함됩니다.\n`include` 매개변수 값에 따라 본문에 추가 특성이 포함될 수 있습니다. \n\n  - `user` - `U+007BUserU+007D` - 현재 로그인된 사용자의 데이터. (`include=user`)\n\n",
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "description": "응답 본문에 로그인 시 작성한 AccessToken 특성이 포함됩니다.\n`include` 매개변수 값에 따라 본문에 추가 특성이 포함될 수 있습니다. \n\n  - `user` - `U+007BUserU+007D` - 현재 로그인된 사용자의 데이터. (`include=user`)\n\n",
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "string"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string"
              }
            },
            "text/xml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "summary": "Login a user with username/email and password."
      }
    },
    "/Users/logout": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.logout",
        "summary": "Logout a user with access token."
      }
    },
    "/Users/replaceOrCreate": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.replaceOrCreate__post_Users_replaceOrCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        },
        "summary": "Replace an existing model instance or insert a new one into the data source."
      }
    },
    "/Users/reset": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object"
              }
            },
            "application/xml": {
              "schema": {
                "type": "object"
              }
            },
            "text/xml": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Reset password for a user with email."
      }
    },
    "/Users/reset-password": {
      "post": {
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.setPassword",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "newPassword": {
                    "type": "string"
                  }
                },
                "required": [
                  "newPassword"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Reset user's password via a password-reset token."
      }
    },
    "/Users/update": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "description": "Information related to the outcome of the operation",
                  "properties": {
                    "count": {
                      "description": "The number of instances updated",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.updateAll",
        "requestBody": {
          "$ref": "#/components/requestBodies/User2"
        },
        "summary": "Update instances of the model matched by {{where}} from the data source."
      }
    },
    "/Users/upsertWithWhere": {
      "post": {
        "parameters": [
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.upsertWithWhere",
        "requestBody": {
          "$ref": "#/components/requestBodies/User2"
        },
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria."
      }
    },
    "/Users/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.deleteById",
        "summary": "Delete a model instance by {{id}} from the data source."
      },
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.findById",
        "summary": "Find a model instance by {{id}} from the data source."
      },
      "head": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.exists__head_Users_{id}",
        "summary": "Check whether a model instance exists in the data source."
      },
      "patch": {
        "parameters": [
          {
            "description": "User id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.prototype.patchAttributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "An object of model property name/value pairs"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "An object of model property name/value pairs"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "An object of model property name/value pairs"
              }
            }
          },
          "description": "An object of model property name/value pairs"
        },
        "summary": "Patch attributes for a model instance and persist it into the data source."
      },
      "put": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.replaceById__put_Users_{id}",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Users/{id}/accessTokens": {
      "delete": {
        "parameters": [
          {
            "description": "User id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.prototype.__delete__accessTokens",
        "summary": "이 모델의 모든 accessTokens을(를) 삭제합니다."
      },
      "get": {
        "parameters": [
          {
            "description": "User id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccessToken"
                  },
                  "type": "array"
                }
              },
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccessToken"
                  },
                  "type": "array"
                }
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccessToken"
                  },
                  "type": "array"
                }
              },
              "text/javascript": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccessToken"
                  },
                  "type": "array"
                }
              },
              "text/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccessToken"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.prototype.__get__accessTokens",
        "summary": "User의 accessTokens을(를) 조회합니다."
      },
      "post": {
        "parameters": [
          {
            "description": "User id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.prototype.__create__accessTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessToken"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AccessToken"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccessToken"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccessToken"
              }
            }
          }
        },
        "summary": "이 모델의 accessTokens에서 새 인스턴스를 작성합니다."
      }
    },
    "/Users/{id}/accessTokens/count": {
      "get": {
        "parameters": [
          {
            "description": "User id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "Criteria to match model instances",
            "in": "query",
            "name": "where",
            "required": false,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "count": {
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.prototype.__count__accessTokens",
        "summary": "User의 accessTokens을(를) 계수합니다."
      }
    },
    "/Users/{id}/accessTokens/{fk}": {
      "delete": {
        "parameters": [
          {
            "description": "User id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "accessTokens의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.prototype.__destroyById__accessTokens",
        "summary": "accessTokens에 대해 ID로 관련 항목을 삭제하십시오."
      },
      "get": {
        "parameters": [
          {
            "description": "User id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "accessTokens의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.prototype.__findById__accessTokens",
        "summary": "accessTokens에 대해 ID로 관련 항목을 찾으십시오."
      },
      "put": {
        "parameters": [
          {
            "description": "User id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          },
          {
            "description": "accessTokens의 외부 키",
            "in": "path",
            "name": "fk",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.prototype.__updateById__accessTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessToken"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AccessToken"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccessToken"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccessToken"
              }
            }
          }
        },
        "summary": "accessTokens에 대해 ID로 관련 항목을 업데이트하십시오."
      }
    },
    "/Users/{id}/exists": {
      "get": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "application/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/javascript": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "text/xml": {
                "schema": {
                  "properties": {
                    "exists": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.exists__get_Users_{id}_exists",
        "summary": "Check whether a model instance exists in the data source."
      }
    },
    "/Users/{id}/replace": {
      "post": {
        "parameters": [
          {
            "description": "Model id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/javascript": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.replaceById__post_Users_{id}_replace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "Model instance data"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "Model instance data"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "Model instance data"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "Model instance data"
              }
            }
          },
          "description": "Model instance data"
        },
        "summary": "Replace attributes for a model instance and persist it into the data source."
      }
    },
    "/Users/{id}/verify": {
      "post": {
        "parameters": [
          {
            "description": "User id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "JSON",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "tags": [
          "User"
        ],
        "deprecated": false,
        "operationId": "User.prototype.verify",
        "summary": "Trigger user's identity verification with configured verifyOptions"
      }
    }
  },
  "components": {
    "requestBodies": {
      "AccessToken": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AccessToken"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/AccessToken"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/AccessToken"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/AccessToken"
            }
          }
        }
      },
      "Account": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "Address": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          }
        }
      },
      "Book": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Book",
              "description": "Model instance data"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Book",
              "description": "Model instance data"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Book",
              "description": "Model instance data"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Book",
              "description": "Model instance data"
            }
          }
        },
        "description": "Model instance data"
      },
      "Book2": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Book",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Book",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Book",
              "description": "An object of model property name/value pairs"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Book",
              "description": "An object of model property name/value pairs"
            }
          }
        },
        "description": "An object of model property name/value pairs"
      },
      "Customer": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Customer",
              "description": "Model instance data"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Customer",
              "description": "Model instance data"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Customer",
              "description": "Model instance data"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Customer",
              "description": "Model instance data"
            }
          }
        },
        "description": "Model instance data"
      },
      "Customer2": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Customer",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Customer",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Customer",
              "description": "An object of model property name/value pairs"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Customer",
              "description": "An object of model property name/value pairs"
            }
          }
        },
        "description": "An object of model property name/value pairs"
      },
      "EmailAddress": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          }
        }
      },
      "Link": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Link"
            }
          }
        }
      },
      "Order": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "Order2": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Order",
              "description": "Model instance data"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Order",
              "description": "Model instance data"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Order",
              "description": "Model instance data"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Order",
              "description": "Model instance data"
            }
          }
        },
        "description": "Model instance data"
      },
      "Order3": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Order",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Order",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Order",
              "description": "An object of model property name/value pairs"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Order",
              "description": "An object of model property name/value pairs"
            }
          }
        },
        "description": "An object of model property name/value pairs"
      },
      "Shipment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Shipment"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Shipment"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Shipment"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Shipment"
            }
          }
        }
      },
      "Shipment2": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Shipment",
              "description": "Model instance data"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Shipment",
              "description": "Model instance data"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Shipment",
              "description": "Model instance data"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Shipment",
              "description": "Model instance data"
            }
          }
        },
        "description": "Model instance data"
      },
      "Shipment3": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Shipment",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Shipment",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Shipment",
              "description": "An object of model property name/value pairs"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/Shipment",
              "description": "An object of model property name/value pairs"
            }
          }
        },
        "description": "An object of model property name/value pairs"
      },
      "User": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User",
              "description": "Model instance data"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/User",
              "description": "Model instance data"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/User",
              "description": "Model instance data"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/User",
              "description": "Model instance data"
            }
          }
        },
        "description": "Model instance data"
      },
      "User.createChangeStream__post_Users_change-stream": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "properties": {
                "options": {
                  "format": "JSON",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "User2": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/User",
              "description": "An object of model property name/value pairs"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/User",
              "description": "An object of model property name/value pairs"
            }
          },
          "text/xml": {
            "schema": {
              "$ref": "#/components/schemas/User",
              "description": "An object of model property name/value pairs"
            }
          }
        },
        "description": "An object of model property name/value pairs"
      }
    },
    "schemas": {
      "AccessToken": {
        "additionalProperties": false,
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "scopes": {
            "description": "Array of scopes granted to this access token.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ttl": {
            "default": 1209600,
            "description": "time to live in seconds (2 weeks by default)",
            "format": "double",
            "type": "number"
          },
          "userId": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "Account": {
        "additionalProperties": false,
        "properties": {
          "balance": {
            "format": "double",
            "type": "number"
          },
          "id": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Address": {
        "additionalProperties": false,
        "properties": {
          "city": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Book": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "double",
            "type": "number"
          },
          "links": {
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Customer": {
        "additionalProperties": false,
        "properties": {
          "accountIds": {
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "age": {
            "format": "double",
            "type": "number"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "emailList": {
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            },
            "type": "array"
          },
          "id": {
            "format": "double",
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailAddress": {
        "additionalProperties": false,
        "properties": {
          "address": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Link": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "format": "double",
            "type": "number"
          },
          "linkedId": {
            "format": "double",
            "type": "number"
          },
          "linkedType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "Order": {
        "additionalProperties": false,
        "properties": {
          "customerId": {
            "format": "double",
            "type": "number"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Shipment": {
        "additionalProperties": false,
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "double",
            "type": "number"
          },
          "orderId": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "User": {
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "id": {
            "format": "double",
            "type": "number"
          },
          "realm": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "x-any": {
        "properties": {},
        "type": "object"
      }
    }
  },
  "tags": [
    {
      "name": "User"
    },
    {
      "name": "Customer"
    },
    {
      "name": "Book"
    },
    {
      "name": "Order"
    },
    {
      "name": "Shipment"
    }
  ]
}