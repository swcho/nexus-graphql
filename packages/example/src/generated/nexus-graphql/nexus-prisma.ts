/**
 * This file was automatically generated by nexus-prisma@0.0.1
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../types/types'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Order: OrderObject
      Pet: PetObject
      Category: CategoryObject
      Tag: TagObject
      User: UserObject
      Mutation: MutationObject
      ApiResponse: ApiResponseObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Order: OrderFieldDetails
      Pet: PetFieldDetails
      Category: CategoryFieldDetails
      Tag: TagFieldDetails
      User: UserFieldDetails
      Mutation: MutationFieldDetails
      ApiResponse: ApiResponseFieldDetails
    }
  }
  inputTypes: {
    fields: {
      OrderInput: OrderInputInputObject
    }
  }
  enumTypes: {
    Status2: Status2Values,
    Status: StatusValues,
    Status3ListItem: Status3ListItemValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'order', args?: QueryOrderArgs[] | false, alias?: string  } 
  | { name: 'pet', args?: QueryPetArgs[] | false, alias?: string  } 
  | { name: 'petFindByStatus', args?: QueryPetFindByStatusArgs[] | false, alias?: string  } 
  | { name: 'petFindByTags', args?: QueryPetFindByTagsArgs[] | false, alias?: string  } 
  | { name: 'storeInventory', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'userLogin', args?: QueryUserLoginArgs[] | false, alias?: string  } 

type QueryFields =
  | 'order'
  | 'pet'
  | 'petFindByStatus'
  | 'petFindByTags'
  | 'storeInventory'
  | 'user'
  | 'userLogin'


type QueryOrderArgs =
  | 'orderId'
type QueryPetArgs =
  | 'petId'
type QueryPetFindByStatusArgs =
  | 'status'
type QueryPetFindByTagsArgs =
  | 'tags'
type QueryUserArgs =
  | 'username'
type QueryUserLoginArgs =
  | 'password'
  | 'username'
  

export interface QueryFieldDetails {
  order: {
    type: 'Order'
    args: Record<QueryOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { orderId: number }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  pet: {
    type: 'Pet'
    args: Record<QueryPetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { petId: number }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pet | null> | prisma.Pet | null
  }
  petFindByStatus: {
    type: 'Pet'
    args: Record<QueryPetFindByStatusArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { status: prisma.Status3ListItem[] }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pet[] | null> | prisma.Pet[] | null
  }
  petFindByTags: {
    type: 'Pet'
    args: Record<QueryPetFindByTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { tags: string[] }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pet[] | null> | prisma.Pet[] | null
  }
  storeInventory: {
    type: 'JSON'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { username: string }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  userLogin: {
    type: 'String'
    args: Record<QueryUserLoginArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Order

type OrderObject =
  | OrderFields
  | { name: 'complete', args?: [] | false, alias?: string  } 
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'petId', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'shipDate', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type OrderFields =
  | 'complete'
  | 'id'
  | 'petId'
  | 'quantity'
  | 'shipDate'
  | 'status'



  

export interface OrderFieldDetails {
  complete: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  id: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  petId: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  quantity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  shipDate: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'Status2'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Order">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status2 | null> | prisma.Status2 | null
  }
}
  

// Types for Pet

type PetObject =
  | PetFields
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'photoUrls', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'tags', args?: [] | false, alias?: string  } 

type PetFields =
  | 'category'
  | 'id'
  | 'name'
  | 'photoUrls'
  | 'status'
  | 'tags'



  

export interface PetFieldDetails {
  category: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Pet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  id: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  photoUrls: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Pet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status | null> | prisma.Status | null
  }
  tags: {
    type: 'Tag'
    args: {}
    description: string
    list: true
    nullable: true
    resolve: (
      root: core.RootValue<"Pet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag[] | null> | prisma.Tag[] | null
  }
}
  

// Types for Category

type CategoryObject =
  | CategoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type CategoryFields =
  | 'id'
  | 'name'



  

export interface CategoryFieldDetails {
  id: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Tag

type TagObject =
  | TagFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type TagFields =
  | 'id'
  | 'name'



  

export interface TagFieldDetails {
  id: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'userStatus', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 

type UserFields =
  | 'email'
  | 'firstName'
  | 'id'
  | 'lastName'
  | 'password'
  | 'phone'
  | 'userStatus'
  | 'username'



  

export interface UserFieldDetails {
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  id: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  userStatus: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'placeOrder', args?: MutationPlaceOrderArgs[] | false, alias?: string  } 
  | { name: 'uploadFile', args?: MutationUploadFileArgs[] | false, alias?: string  } 

type MutationFields =
  | 'placeOrder'
  | 'uploadFile'


type MutationPlaceOrderArgs =
  | 'orderInput'
type MutationUploadFileArgs =
  | 'multipartFormDataInput'
  | 'petId'
  

export interface MutationFieldDetails {
  placeOrder: {
    type: 'Order'
    args: Record<MutationPlaceOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { orderInput: OrderInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  uploadFile: {
    type: 'ApiResponse'
    args: Record<MutationUploadFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { multipartFormDataInput?: string | null, petId: number }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApiResponse | null> | prisma.ApiResponse | null
  }
}
  

// Types for ApiResponse

type ApiResponseObject =
  | ApiResponseFields
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'message', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type ApiResponseFields =
  | 'code'
  | 'message'
  | 'type'



  

export interface ApiResponseFieldDetails {
  code: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  message: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


  export interface OrderInput {
    complete?: boolean | null
  id?: number | null
  petId?: number | null
  quantity?: number | null
  shipDate?: string | null
  status?: prisma.Status2 | null
  }
  export type OrderInputInputObject =
    | Extract<keyof OrderInput, string>
    | { name: 'complete', alias?: string  } 
  | { name: 'id', alias?: string  } 
  | { name: 'petId', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'shipDate', alias?: string  } 
  | { name: 'status', alias?: string  } 
    

export type Status2Values =
  | 'placed'
  | 'approved'
  | 'delivered'
  
export type StatusValues =
  | 'available'
  | 'pending'
  | 'sold'
  
export type Status3ListItemValues =
  | 'available'
  | 'pending'
  | 'sold'
  
  