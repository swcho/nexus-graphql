/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from './types'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Tweet: TweetObject
      User: UserObject
      Stat: StatObject
      Meta: MetaObject
      Notification: NotificationObject
      Mutation: MutationObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Tweet: TweetFieldDetails
      User: UserFieldDetails
      Stat: StatFieldDetails
      Meta: MetaFieldDetails
      Notification: NotificationFieldDetails
      Mutation: MutationFieldDetails
    }
  }
  inputTypes: {
    fields: {

    }
  }
  enumTypes: {

  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'Tweet', args?: QueryTweetArgs[] | false, alias?: string  } 
  | { name: 'Tweets', args?: QueryTweetsArgs[] | false, alias?: string  } 
  | { name: 'TweetsMeta', args?: [] | false, alias?: string  } 
  | { name: 'User', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'Notifications', args?: QueryNotificationsArgs[] | false, alias?: string  } 
  | { name: 'NotificationsMeta', args?: [] | false, alias?: string  } 

type QueryFields =
  | 'Tweet'
  | 'Tweets'
  | 'TweetsMeta'
  | 'User'
  | 'Notifications'
  | 'NotificationsMeta'


type QueryTweetArgs =
  | 'id'
type QueryTweetsArgs =
  | 'limit'
  | 'skip'
  | 'sort_field'
  | 'sort_order'
type QueryUserArgs =
  | 'id'
type QueryNotificationsArgs =
  | 'limit'
  

export interface QueryFieldDetails {
  Tweet: {
    type: 'Tweet'
    args: Record<QueryTweetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { id: string }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet | null> | prisma.Tweet | null
  }
  Tweets: {
    type: 'Tweet'
    args: Record<QueryTweetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { limit?: number | null, skip?: number | null, sort_field?: string | null, sort_order?: string | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet[] | null> | prisma.Tweet[] | null
  }
  TweetsMeta: {
    type: 'Meta'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Meta | null> | prisma.Meta | null
  }
  User: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { id: string }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  Notifications: {
    type: 'Notification'
    args: Record<QueryNotificationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { limit?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification[] | null> | prisma.Notification[] | null
  }
  NotificationsMeta: {
    type: 'Meta'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Meta | null> | prisma.Meta | null
  }
}
  

// Types for Tweet

type TweetObject =
  | TweetFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'body', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'Author', args?: [] | false, alias?: string  } 
  | { name: 'Stats', args?: [] | false, alias?: string  } 

type TweetFields =
  | 'id'
  | 'body'
  | 'date'
  | 'Author'
  | 'Stats'



  

export interface TweetFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  body: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  date: {
    type: 'Date'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  Author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Tweet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  Stats: {
    type: 'Stat'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Tweet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Stat | null> | prisma.Stat | null
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'first_name', args?: [] | false, alias?: string  } 
  | { name: 'last_name', args?: [] | false, alias?: string  } 
  | { name: 'full_name', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'avatar_url', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'username'
  | 'first_name'
  | 'last_name'
  | 'full_name'
  | 'name'
  | 'avatar_url'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  first_name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  last_name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  full_name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  avatar_url: {
    type: 'Url'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Stat

type StatObject =
  | StatFields
  | { name: 'views', args?: [] | false, alias?: string  } 
  | { name: 'likes', args?: [] | false, alias?: string  } 
  | { name: 'retweets', args?: [] | false, alias?: string  } 
  | { name: 'responses', args?: [] | false, alias?: string  } 

type StatFields =
  | 'views'
  | 'likes'
  | 'retweets'
  | 'responses'



  

export interface StatFieldDetails {
  views: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  likes: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  retweets: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  responses: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Meta

type MetaObject =
  | MetaFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type MetaFields =
  | 'count'



  

export interface MetaFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Notification

type NotificationObject =
  | NotificationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type NotificationFields =
  | 'id'
  | 'date'
  | 'type'



  

export interface NotificationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  date: {
    type: 'Date'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createTweet', args?: MutationCreateTweetArgs[] | false, alias?: string  } 
  | { name: 'deleteTweet', args?: MutationDeleteTweetArgs[] | false, alias?: string  } 
  | { name: 'markTweetRead', args?: MutationMarkTweetReadArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createTweet'
  | 'deleteTweet'
  | 'markTweetRead'


type MutationCreateTweetArgs =
  | 'body'
type MutationDeleteTweetArgs =
  | 'id'
type MutationMarkTweetReadArgs =
  | 'id'
  

export interface MutationFieldDetails {
  createTweet: {
    type: 'Tweet'
    args: Record<MutationCreateTweetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { body?: string | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet | null> | prisma.Tweet | null
  }
  deleteTweet: {
    type: 'Tweet'
    args: Record<MutationDeleteTweetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { id: string }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tweet | null> | prisma.Tweet | null
  }
  markTweetRead: {
    type: 'Boolean'
    args: Record<MutationMarkTweetReadArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  





  