{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "loopback-example-relations",
    "description": "LoopBack model relations example"
  },
  "basePath": "/api",
  "paths": {
    "/Users/{id}/accessTokens/{fk}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "accessTokens에 대해 ID로 관련 항목을 찾으십시오.",
        "operationId": "User.prototype.__findById__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "accessTokens의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "accessTokens에 대해 ID로 관련 항목을 삭제하십시오.",
        "operationId": "User.prototype.__destroyById__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "accessTokens의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "accessTokens에 대해 ID로 관련 항목을 업데이트하십시오.",
        "operationId": "User.prototype.__updateById__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "accessTokens의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/accessTokens": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User의 accessTokens을(를) 조회합니다.",
        "operationId": "User.prototype.__get__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessToken"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "이 모델의 accessTokens에서 새 인스턴스를 작성합니다.",
        "operationId": "User.prototype.__create__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "이 모델의 모든 accessTokens을(를) 삭제합니다.",
        "operationId": "User.prototype.__delete__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/accessTokens/count": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User의 accessTokens을(를) 계수합니다.",
        "operationId": "User.prototype.__count__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "User.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "User.patchOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "User.replaceOrCreate__put_Users",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "User.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/replaceOrCreate": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "User.replaceOrCreate__post_Users_replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/upsertWithWhere": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "User.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/exists": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "User.exists__get_Users_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}": {
      "head": {
        "tags": [
          "User"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "User.exists__head_Users_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "User.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "User.replaceById__put_Users_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "User.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "User.prototype.patchAttributes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/replace": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "User.replaceById__post_Users_{id}_replace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/findOne": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "User.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/update": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "User.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/count": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "User.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login a user with username/email and password.",
        "operationId": "User.login",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Related objects to include in the response. See the description of return value for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "응답 본문에 로그인 시 작성한 AccessToken 특성이 포함됩니다.\n`include` 매개변수 값에 따라 본문에 추가 특성이 포함될 수 있습니다. \n\n  - `user` - `U+007BUserU+007D` - 현재 로그인된 사용자의 데이터. (`include=user`)\n\n",
              "type": "object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Users/logout": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logout a user with access token.",
        "operationId": "User.logout",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}/verify": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Trigger user's identity verification with configured verifyOptions",
        "operationId": "User.prototype.verify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/confirm": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Confirm a user registration with identity verification token.",
        "operationId": "User.confirm",
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/reset": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset password for a user with email.",
        "operationId": "User.resetPassword",
        "parameters": [
          {
            "name": "options",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/change-password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Change a user's password.",
        "operationId": "User.changePassword",
        "parameters": [
          {
            "name": "oldPassword",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "newPassword",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Users/reset-password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset user's password via a password-reset token.",
        "operationId": "User.setPassword",
        "parameters": [
          {
            "name": "newPassword",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/address": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "페치에 하나의 관계 address이(가) 있습니다.",
        "operationId": "Customer.prototype.__get__address",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "refresh",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 address에서 새 인스턴스를 작성합니다.",
        "operationId": "Customer.prototype.__create__address",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 address을(를) 업데이트하십시오.",
        "operationId": "Customer.prototype.__update__address",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 address을(를) 삭제합니다.",
        "operationId": "Customer.prototype.__destroy__address",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/emails/{fk}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "emails에 대해 ID로 관련 항목을 찾으십시오.",
        "operationId": "Customer.prototype.__findById__emails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "emails의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/EmailAddress"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "emails에 대해 ID로 관련 항목을 삭제하십시오.",
        "operationId": "Customer.prototype.__destroyById__emails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "emails의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "emails에 대해 ID로 관련 항목을 업데이트하십시오.",
        "operationId": "Customer.prototype.__updateById__emails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "emails의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmailAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/EmailAddress"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/accounts/{fk}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "accounts에 대해 ID로 관련 항목을 찾으십시오.",
        "operationId": "Customer.prototype.__findById__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "accounts의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "accounts에 대해 ID로 관련 항목을 삭제하십시오.",
        "operationId": "Customer.prototype.__destroyById__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "accounts의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "accounts에 대해 ID로 관련 항목을 업데이트하십시오.",
        "operationId": "Customer.prototype.__updateById__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "accounts의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/accounts/rel/{fk}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "accounts에 대해 ID로 관련 항목을 추가하십시오.",
        "operationId": "Customer.prototype.__link__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "accounts의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "ID로 항목에 대한 accounts 관계를 제거하십시오.",
        "operationId": "Customer.prototype.__unlink__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "accounts의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "head": {
        "tags": [
          "Customer"
        ],
        "summary": "ID로 항목에 대한 accounts 관계의 존재를 확인하십시오.",
        "operationId": "Customer.prototype.__exists__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "accounts의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/orders/{fk}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "orders에 대해 ID로 관련 항목을 찾으십시오.",
        "operationId": "Customer.prototype.__findById__orders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "orders의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "orders에 대해 ID로 관련 항목을 삭제하십시오.",
        "operationId": "Customer.prototype.__destroyById__orders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "orders의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "orders에 대해 ID로 관련 항목을 업데이트하십시오.",
        "operationId": "Customer.prototype.__updateById__orders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "orders의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/emails": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer의 emails을(를) 조회합니다.",
        "operationId": "Customer.prototype.__get__emails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmailAddress"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 emails에서 새 인스턴스를 작성합니다.",
        "operationId": "Customer.prototype.__create__emails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmailAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/EmailAddress"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 모든 emails을(를) 삭제합니다.",
        "operationId": "Customer.prototype.__delete__emails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/emails/count": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer의 emails을(를) 계수합니다.",
        "operationId": "Customer.prototype.__count__emails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/accounts": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer의 accounts을(를) 조회합니다.",
        "operationId": "Customer.prototype.__get__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 accounts에서 새 인스턴스를 작성합니다.",
        "operationId": "Customer.prototype.__create__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 모든 accounts을(를) 삭제합니다.",
        "operationId": "Customer.prototype.__delete__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/accounts/count": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer의 accounts을(를) 계수합니다.",
        "operationId": "Customer.prototype.__count__accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/orders": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer의 orders을(를) 조회합니다.",
        "operationId": "Customer.prototype.__get__orders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 orders에서 새 인스턴스를 작성합니다.",
        "operationId": "Customer.prototype.__create__orders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 모든 orders을(를) 삭제합니다.",
        "operationId": "Customer.prototype.__delete__orders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/orders/count": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Customer의 orders을(를) 계수합니다.",
        "operationId": "Customer.prototype.__count__orders",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "Customer.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "Customer.patchOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "Customer.replaceOrCreate__put_Customers",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "Customer.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/replaceOrCreate": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "Customer.replaceOrCreate__post_Customers_replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/upsertWithWhere": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "Customer.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/exists": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Customer.exists__get_Customers_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}": {
      "head": {
        "tags": [
          "Customer"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Customer.exists__head_Customers_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "Customer.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "Customer.replaceById__put_Customers_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "Customer.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Customer.prototype.patchAttributes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/replace": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "Customer.replaceById__post_Customers_{id}_replace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/findOne": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "Customer.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/update": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "Customer.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/count": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "Customer.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/orders/{nk}/customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "페치가 관계 customer에 속합니다.",
        "operationId": "Customer.prototype.__get__orders__customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nk",
            "in": "path",
            "description": "orders의 외부 키입니다.",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "refresh",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/orders/{nk}/shipments/{fk}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "shipments에 대해 ID로 관련 항목을 찾으십시오.",
        "operationId": "Customer.prototype.__findById__orders__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nk",
            "in": "path",
            "description": "orders의 외부 키입니다.",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "shipments의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "shipments에 대해 ID로 관련 항목을 삭제하십시오.",
        "operationId": "Customer.prototype.__destroyById__orders__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nk",
            "in": "path",
            "description": "orders의 외부 키입니다.",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "shipments의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "shipments에 대해 ID로 관련 항목을 업데이트하십시오.",
        "operationId": "Customer.prototype.__updateById__orders__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nk",
            "in": "path",
            "description": "orders의 외부 키입니다.",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "shipments의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/orders/{nk}/shipments": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Order의 shipments을(를) 조회합니다.",
        "operationId": "Customer.prototype.__get__orders__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nk",
            "in": "path",
            "description": "orders의 외부 키입니다.",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Shipment"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 shipments에서 새 인스턴스를 작성합니다.",
        "operationId": "Customer.prototype.__create__orders__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nk",
            "in": "path",
            "description": "orders의 외부 키입니다.",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "이 모델의 모든 shipments을(를) 삭제합니다.",
        "operationId": "Customer.prototype.__delete__orders__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nk",
            "in": "path",
            "description": "orders의 외부 키입니다.",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/orders/{nk}/shipments/count": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Order의 shipments을(를) 계수합니다.",
        "operationId": "Customer.prototype.__count__orders__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nk",
            "in": "path",
            "description": "orders의 외부 키입니다.",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/{id}/people/{fk}": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "people에 대해 ID로 관련 항목을 찾으십시오.",
        "operationId": "Book.prototype.__findById__people",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "people의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Book"
        ],
        "summary": "people에 대해 ID로 관련 항목을 삭제하십시오.",
        "operationId": "Book.prototype.__destroyById__people",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "people의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Book"
        ],
        "summary": "people에 대해 ID로 관련 항목을 업데이트하십시오.",
        "operationId": "Book.prototype.__updateById__people",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "people의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/{id}/people": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Book의 people을(를) 조회합니다.",
        "operationId": "Book.prototype.__get__people",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Link"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "이 모델의 people에서 새 인스턴스를 작성합니다.",
        "operationId": "Book.prototype.__create__people",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Book"
        ],
        "summary": "이 모델의 모든 people을(를) 삭제합니다.",
        "operationId": "Book.prototype.__delete__people",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Books/{id}/people/count": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Book의 people을(를) 계수합니다.",
        "operationId": "Book.prototype.__count__people",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books": {
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "Book.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Book"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "Book.patchOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Book"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "Book.replaceOrCreate__put_Books",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "Book.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/replaceOrCreate": {
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "Book.replaceOrCreate__post_Books_replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/upsertWithWhere": {
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "Book.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/{id}/exists": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Book.exists__get_Books_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/{id}": {
      "head": {
        "tags": [
          "Book"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Book.exists__head_Books_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "Book.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Book"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "Book.replaceById__put_Books_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Book"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "Book.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Book"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Book.prototype.patchAttributes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Book id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/{id}/replace": {
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "Book.replaceById__post_Books_{id}_replace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/findOne": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "Book.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/update": {
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "Book.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Books/count": {
      "get": {
        "tags": [
          "Book"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "Book.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/{id}/customer": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "페치가 관계 customer에 속합니다.",
        "operationId": "Order.prototype.__get__customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "refresh",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/{id}/shipments/{fk}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "shipments에 대해 ID로 관련 항목을 찾으십시오.",
        "operationId": "Order.prototype.__findById__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "shipments의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "shipments에 대해 ID로 관련 항목을 삭제하십시오.",
        "operationId": "Order.prototype.__destroyById__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "shipments의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "shipments에 대해 ID로 관련 항목을 업데이트하십시오.",
        "operationId": "Order.prototype.__updateById__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "shipments의 외부 키",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/{id}/shipments": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Order의 shipments을(를) 조회합니다.",
        "operationId": "Order.prototype.__get__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Shipment"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "이 모델의 shipments에서 새 인스턴스를 작성합니다.",
        "operationId": "Order.prototype.__create__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "이 모델의 모든 shipments을(를) 삭제합니다.",
        "operationId": "Order.prototype.__delete__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          }
        },
        "deprecated": false
      }
    },
    "/Orders/{id}/shipments/count": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Order의 shipments을(를) 계수합니다.",
        "operationId": "Order.prototype.__count__shipments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "Order.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "Order.patchOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "Order.replaceOrCreate__put_Orders",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "Order.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/replaceOrCreate": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "Order.replaceOrCreate__post_Orders_replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/upsertWithWhere": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "Order.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/{id}/exists": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Order.exists__get_Orders_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/{id}": {
      "head": {
        "tags": [
          "Order"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Order.exists__head_Orders_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "Order.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "Order.replaceById__put_Orders_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "Order.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Order.prototype.patchAttributes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/{id}/replace": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "Order.replaceById__post_Orders_{id}_replace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/findOne": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "Order.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/update": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "Order.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Orders/count": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "Order.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments/{id}/order": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "페치가 관계 order에 속합니다.",
        "operationId": "Shipment.prototype.__get__order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Shipment id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "refresh",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Create a new instance of the model and persist it into the data source.",
        "operationId": "Shipment.create",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Shipment"
        ],
        "summary": "Patch an existing model instance or insert a new one into the data source.",
        "operationId": "Shipment.patchOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Shipment"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "Shipment.replaceOrCreate__put_Shipments",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "Shipment.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Shipment"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments/replaceOrCreate": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Replace an existing model instance or insert a new one into the data source.",
        "operationId": "Shipment.replaceOrCreate__post_Shipments_replaceOrCreate",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments/upsertWithWhere": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Update an existing model instance or insert a new one into the data source based on the where criteria.",
        "operationId": "Shipment.upsertWithWhere",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments/{id}/exists": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Shipment.exists__get_Shipments_{id}_exists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments/{id}": {
      "head": {
        "tags": [
          "Shipment"
        ],
        "summary": "Check whether a model instance exists in the data source.",
        "operationId": "Shipment.exists__head_Shipments_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "exists": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "Shipment.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Shipment"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "Shipment.replaceById__put_Shipments_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Shipment"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "operationId": "Shipment.deleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Shipment"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Shipment.prototype.patchAttributes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Shipment id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments/{id}/replace": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Replace attributes for a model instance and persist it into the data source.",
        "operationId": "Shipment.replaceById__post_Shipments_{id}_replace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Model instance data",
            "required": false,
            "schema": {
              "description": "Model instance data",
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments/findOne": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Find first instance of the model matched by filter from the data source.",
        "operationId": "Shipment.findOne",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments/update": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Update instances of the model matched by {{where}} from the data source.",
        "operationId": "Shipment.updateAll",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "Information related to the outcome of the operation",
              "type": "object",
              "properties": {
                "count": {
                  "description": "The number of instances updated",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Shipments/count": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "Shipment.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "tags": [
    {
      "name": "User"
    },
    {
      "name": "Customer"
    },
    {
      "name": "Book"
    },
    {
      "name": "Order"
    },
    {
      "name": "Shipment"
    }
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "application/xml",
    "text/xml"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "text/xml",
    "application/javascript",
    "text/javascript"
  ],
  "definitions": {
    "x-any": {
      "properties": {}
    },
    "AccessToken": {
      "properties": {
        "id": {
          "type": "string"
        },
        "ttl": {
          "default": 1209600,
          "description": "time to live in seconds (2 weeks by default)",
          "type": "number",
          "format": "double"
        },
        "scopes": {
          "description": "Array of scopes granted to this access token.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "User": {
      "properties": {
        "realm": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "email"
      ],
      "additionalProperties": false
    },
    "Address": {
      "properties": {
        "street": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "EmailAddress": {
      "properties": {
        "label": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Account": {
      "properties": {
        "name": {
          "type": "string"
        },
        "balance": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "additionalProperties": false
    },
    "Order": {
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "number",
          "format": "double"
        },
        "customerId": {
          "type": "number",
          "format": "double"
        }
      },
      "additionalProperties": false
    },
    "Customer": {
      "properties": {
        "name": {
          "type": "string"
        },
        "age": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "number",
          "format": "double"
        },
        "billingAddress": {
          "$ref": "#/definitions/Address"
        },
        "emailList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailAddress"
          }
        },
        "accountIds": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "additionalProperties": false
    },
    "Shipment": {
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "number",
          "format": "double"
        },
        "orderId": {
          "type": "number",
          "format": "double"
        }
      },
      "additionalProperties": false
    },
    "Link": {
      "properties": {
        "id": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "linkedId": {
          "type": "number",
          "format": "double"
        },
        "linkedType": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "Book": {
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "number",
          "format": "double"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      },
      "additionalProperties": false
    }
  }
}